- name: "Prepare nodes"
  hosts: nodes
  tasks:
    - name: Mount speed-data
      ansible.posix.mount:
        path: /mnt/speed-data
        src: /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi1-part1
        fstype: ext4
        state: mounted

    - name: Mount big-data
      ansible.posix.mount:
        path: /mnt/big-data
        src: /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi2-part1
        fstype: ext4
        state: mounted

    - name: Deploy k3s
      run_once: True
      shell: >
        curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="server" sh -s - --flannel-backend none --disable-network-policy --disable=traefik --disable=local-storage --cluster-cidr={{ POD_CIDR }} --service-cidr={{ SERVICE_CIDR }} --disable=servicelb --disable-kube-proxy

    - name: "Put kubectl config in default place"
      #TBD: this always result in changed
      shell: |
        rm -f ${HOME}/.kube/config
        mkdir -p ${HOME}/.kube
        ln -s /etc/rancher/k3s/k3s.yaml  ${HOME}/.kube/config

    - name: Ansible replace string example
      run_once: true
      replace:
        path: ${HOME}/.kube/config
        regexp: "127.0.0.1"
        replace: "{{ IP }}"

    - name: Store kubeconfig in user home
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: /home/{{ USER }}/.kube/config
        flat: yes

    - name: Download helm installer
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get-helm-3.sh
        mode: u+rwx

    - name: Execute the get-helm-3.sh
      shell: /tmp/get-helm-3.sh

    # - name: Download cilium CLI
    #   shell: >
    #     CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
    #     CLI_ARCH=amd64
    #     curl -L --fail --remote-name-all --output-dir /tmp https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
    #     sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
    #     tar xzvfC /tmp/cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
    #     rm /tmp/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}

    - name: Add cilium repo
      shell: helm repo add cilium https://helm.cilium.io/

    - name: Create gateway CRD
      shell: |
        {{ KUBECTL_BIN }} create -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.0.0/experimental-install.yaml
      run_once: True
      register: result
      failed_when:
        - "'already exists' not in result.stderr"
        - result.rc != 0
      changed_when:
        - "result.stderr is not search('already exists')"

    - name: Install cilium
      run_once: True
      shell: >
        helm install cilium cilium/cilium
        --namespace kube-system \
        --set ipam.mode=cluster-pool \
        --set kubeProxyReplacement=true \
        --set k8sServiceHost={{ IP }} \
        --set k8sServicePort=6443 \
        --set hubble.relay.enabled=true \
        --set hubble.ui.enabled=true \
        --set hubble.peerService.clusterDomain=cluster \
        --set operator.replicas=1 \
        --set localRedirectPolicy=true \
        --set bpf.masquerade=true \
        --set bgpControlPlane.enabled=true \
        --set ipam.operator.clusterPoolIPv4PodCIDRList='{{ POD_CIDR }}' \
        --set ipam.operator.clusterPoolIPv4MaskSize={{ MASK_SIZE }} \
        --set gatewayAPI.enabled=true \
        --set envoy.enabled=true

    # - name: Wait for cilium to be ready
    #   shell: cilium --wait
    #   run_once: True
    #   async: 300
    #   poll: 10

    - name: Create flux NS
      shell: |
        {{ KUBECTL_BIN }} create ns {{ FLUX_NAMESPACE }}
      run_once: True
      register: result
      failed_when:
        - "'already exists' not in result.stderr"
        - result.rc != 0
      changed_when:
        - "result.stderr is not search('already exists')"

    - name: Download flux2 installer
      get_url:
        url: https://toolkit.fluxcd.io/install.sh
        dest: /tmp/flux2-installer.sh
        mode: u+rwx

    - name: Execute the flux2-installer.sh
      shell: /tmp/flux2-installer.sh

    - name: "Check flux prerequisites"
      shell: flux check --pre

    - name: Install SOPS AGE
      ansible.builtin.apt:
        name: age

    - name: Install SOPS AGE key
      shell: >
        mkdir /root/.sops/ && echo "{{ SOPS_AGE }}" > /root/.sops/age

    - name: Create secret with SOPS AGE key
      shell: >
        {{ KUBECTL_BIN }} create -n {{ FLUX_NAMESPACE }} secret generic sops-age
        --save-config --dry-run=client
        --from-literal=age.agekey="{{ SOPS_AGE }}"
        -o yaml
        | {{ KUBECTL_BIN }} apply -f -
      run_once: True

    - name: Create docker login K8S secret
      run_once: True
      shell: |
        {{ KUBECTL_BIN }} create secret docker-registry regcred \
        --docker-username={{ DOCKER_USER }} \
        --docker-password={{ DOCKER_PASSWORD }} \
        --docker-server=https://index.docker.io/v2/ \

    - name: Create secret with github key
      run_once: True
      shell: >
        {{ KUBECTL_BIN }} create -n {{ FLUX_NAMESPACE }} secret generic ssh-github
        --save-config --dry-run=client
        --from-literal=identity="{{ FLUX_KEY }}"
        --from-literal=known_hosts="{{ FLUX_PUB_KEY }}"
        -o yaml
        | {{ KUBECTL_BIN }} apply -f -

    # - name: Deploy flux2
    #   run_once: True
    #   shell: >
